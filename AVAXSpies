//SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import '@openzeppelin/contracts/token/ERC721/ERC721.sol';
import '@openzeppelin/contracts/access/Ownable.sol';

contract AVAXSpies is ERC721, Ownable {
    using Strings for uint256;
    uint256 public mintPrice = 1 ether;
    uint256 public maxSupply;
    uint256 public totalSupply;
    bool public isMintEnabled;
    uint public constant max_mint_per_tx = 10;
    mapping(address => uint256) public mintedWallets;

    string public baseUri;
    string public baseExtension = ".json";
    IERC721 public stik;

    constructor(address _stik_address) payable ERC721('AVAX Spies', 'SPIES'){
        maxSupply = 1000;
        // Base IPFS URI of the NFT metadata
        baseUri = "ipfs://xxxxxxxxxxxxxxxxxxxxxxxxx/";
        totalSupply = 0;
        stik = IERC721(_stik_address);
    }
    
    // Public Functions
    function mint(uint[] memory tokenIds) external payable {
        require(isMintEnabled, 'minting not enabled');
        require(tokenIds.length <= max_mint_per_tx, 'Maximum mint of 10 NFTs per transaction.');
        uint256 curTotalSupply = totalSupply;
        require(curTotalSupply + tokenIds.length <= maxSupply, 'Exceeds maxSupply');
        require(tokenIds.length * mintPrice <= msg.value, 'Insufficient funds. More AVAX needed!');

        for(uint i=0;i<tokenIds.length;i++){
            require(stik.ownerOf(tokenIds[i])==msg.sender,"Sender not owner");
            stik.transferFrom(msg.sender,address(0),tokenIds[i]);
            mintedWallets[msg.sender]++;
            totalSupply++;
            uint256 tokenId = totalSupply;
            _safeMint(msg.sender, tokenId);
        }
    }

    // Owner-only Functions
    function toggleIsMintEnabled() external onlyOwner {
        isMintEnabled = !isMintEnabled;
    }

    function setMaxSupply(uint256 _maxSupply) external onlyOwner {
        maxSupply = _maxSupply;
    }

    function setBaseUri(string memory _baseUri) external onlyOwner {
        baseUri = _baseUri;
    }

    function setPrice(uint256 _price) external onlyOwner {
        mintPrice = _price;
}

    function withdrawAll() external payable onlyOwner {
        uint256 balance = address(this).balance;
        uint256 balanceOne = balance * 70 / 100;
        uint256 balanceTwo = balance * 20 / 100;
        uint256 balanceThree = balance * 10/100;
        ( bool transferOne, ) = payable(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4).call{value: balanceOne}("");
        ( bool transferTwo, ) = payable(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4).call{value: balanceTwo}("");
        ( bool transferThree, ) = payable(0x5B38Da6a701c568545dCfcB03FcB875f56beddC4).call{value: balanceThree}("");
        require(transferOne && transferTwo && transferThree, "Transfer failed.");
    }

    // Funtions internal
    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {
        require(_exists(tokenId), "ERC721Metadata: URI query for nonexistent token");
 
        string memory currentBaseURI = _baseURI();
        return bytes(currentBaseURI).length > 0
            ? string(abi.encodePacked(currentBaseURI, tokenId.toString(), baseExtension))
            : "";
    }
 
    function _baseURI() internal view virtual override returns (string memory) {
        return baseUri;
    }

    function setSTIKContract(address _stik_address) public onlyOwner(){
        stik = IERC721(_stik_address);
    }
}
